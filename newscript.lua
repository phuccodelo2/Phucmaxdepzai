--// Serviceslocal Players = game:GetService("Players")local RunService = game:GetService("RunService")local Stats = game:GetService("Stats")local TeleportService = game:GetService("TeleportService")local HttpService = game:GetService("HttpService")local ReplicatedStorage = game:GetService("ReplicatedStorage")local Workspace = game:GetService("Workspace")local LocalPlayer = Players.LocalPlayer--// UI PHUCMAXlocal screenGui = Instance.new("ScreenGui", game.CoreGui)screenGui.Name = "PHUCMAX_UI"screenGui.ZIndexBehavior = Enum.ZIndexBehavior.Globallocal mainFrame = Instance.new("Frame", screenGui)mainFrame.Size = UDim2.new(1,0,1,0)mainFrame.BackgroundTransparency = 1local uiLayout = Instance.new("UIListLayout", mainFrame)uiLayout.HorizontalAlignment = Enum.HorizontalAlignment.CenteruiLayout.VerticalAlignment = Enum.VerticalAlignment.CenteruiLayout.Padding = UDim.new(0,12)local function createRainbowText(text,size)    local label = Instance.new("TextLabel")    label.Size = UDim2.new(0,500,0,size+20)    label.BackgroundTransparency = 1    label.Text = text    label.Font = Enum.Font.GothamBold    label.TextSize = size    label.TextColor3 = Color3.fromRGB(255,255,255)    label.ZIndex = 10    local gradient = Instance.new("UIGradient",label)    gradient.Rotation = 0    gradient.Color = ColorSequence.new{        ColorSequenceKeypoint.new(0, Color3.fromRGB(255,0,0)),        ColorSequenceKeypoint.new(0.2, Color3.fromRGB(255,255,0)),        ColorSequenceKeypoint.new(0.4, Color3.fromRGB(0,255,0)),        ColorSequenceKeypoint.new(0.6, Color3.fromRGB(0,255,255)),        ColorSequenceKeypoint.new(0.8, Color3.fromRGB(0,0,255)),        ColorSequenceKeypoint.new(1, Color3.fromRGB(255,0,255))    }    task.spawn(function()        while task.wait(0.03) do            gradient.Rotation = (gradient.Rotation+3)%360        end    end)    return labelendlocal title = createRainbowText("PHUCMAX",50); title.Parent = mainFramelocal subtitle = createRainbowText("nhattrai",30); subtitle.Parent = mainFramelocal fpsLabel = createRainbowText("FPS: 0",25); fpsLabel.Parent = mainFramelocal pingLabel = createRainbowText("Ping: 0 ms",25); pingLabel.Parent = mainFrame--// Update FPS + Pinglocal frames,lastTime=0,tick()RunService.RenderStepped:Connect(function()    frames+=1    local currentTime = tick()    if currentTime-lastTime>=1 then        fpsLabel.Text="FPS: "..frames        frames=0        lastTime=currentTime    endend)RunService.Heartbeat:Connect(function()    local pingStat = Stats.Network.ServerStatsItem["Data Ping"]    if pingStat then        pingLabel.Text="Ping: "..math.floor(pingStat:GetValue()).." ms"    endend)--// Thông báo góc phải dướilocal notifyFrame = Instance.new("Frame",screenGui)notifyFrame.Size = UDim2.new(0,300,0,200)notifyFrame.Position = UDim2.new(1,-310,1,-260)notifyFrame.BackgroundTransparency = 1local notifyLayout = Instance.new("UIListLayout",notifyFrame)notifyLayout.SortOrder = Enum.SortOrder.LayoutOrdernotifyLayout.Padding = UDim.new(0,5)notifyLayout.VerticalAlignment = Enum.VerticalAlignment.Bottomlocal function Notify(msg)    local note = createRainbowText(msg,20)    note.Parent = notifyFrame    note.Size = UDim2.new(1,0,0,25)    task.delay(2,function() note:Destroy() end)end--// Auto Join Marinestask.spawn(function()    pcall(function()        local TeamBtn = LocalPlayer.PlayerGui:WaitForChild("ChooseTeam").Container.Marines.Frame.ViewportFrame.TextButton        fireclickdetector(TeamBtn.ClickDetector)        Notify("⚓ Auto Join Marines")    end)end)--// Auto Store Fruitgetgenv().AutoStoreFruit = truelocal FRUIT_MAP = {    ["Bomb Fruit"]={remote="StoreFruit",arg="Bomb-Bomb"},    ["Spike Fruit"]={remote="StoreFruit",arg="Spike-Spike"},    ["Chop Fruit"]={remote="StoreFruit",arg="Chop-Chop"},    ["Spring Fruit"]={remote="StoreFruit",arg="Spring-Spring"},    ["Kilo Fruit"]={remote="StoreFruit",arg="Rocket-Rocket"},    ["Rocket Fruit"]={remote="StoreFruit",arg="Rocket-Rocket"},    ["Smoke Fruit"]={remote="StoreFruit",arg="Smoke-Smoke"},    ["Spin Fruit"]={remote="StoreFruit",arg="Spin-Spin"},    ["Flame Fruit"]={remote="StoreFruit",arg="Flame-Flame"},    ["Falcon Fruit"]={remote="StoreFruit",arg="Falcon"},    ["Ice Fruit"]={remote="StoreFruit",arg="Ice-Ice"},    ["Sand Fruit"]={remote="StoreFruit",arg="Sand-Sand"},    ["Dark Fruit"]={remote="StoreFruit",arg="Dark-Dark"},    ["Revive Fruit"]={remote="StoreFruit",arg="Ghost-Ghost"},    ["Ghost Fruit"]={remote="StoreFruit",arg="Ghost-Ghost"},    ["Diamond Fruit"]={remote="StoreFruit",arg="Diamond-Diamond"},    ["Light Fruit"]={remote="StoreFruit",arg="Light-Light"},    ["Love Fruit"]={remote="StoreFruit",arg="Love-Love"},    ["Rubber Fruit"]={remote="StoreFruit",arg="Rubber-Rubber"},    ["Barrier Fruit"]={remote="StoreFruit",arg="Barrier-Barrier"},    ["Magma Fruit"]={remote="StoreFruit",arg="Magma-Magma"},    ["Portal Fruit"]={remote="StoreFruit",arg="Door-Door"},    ["Quake Fruit"]={remote="StoreFruit",arg="Quake-Quake"},    ["Buddha Fruit"]={remote="Buddha",arg=nil},    ["Spider Fruit"]={remote="StoreFruit",arg="Spider-Spider"},    ["Phoenix Fruit"]={remote="StoreFruit",arg="Phoenix"},    ["Rumble Fruit"]={remote="StoreFruit",arg="Rumble-Rumble"},    ["Pain Fruit"]={remote="StoreFruit",arg="Pain-Pain"},    ["Gravity Fruit"]={remote="StoreFruit",arg="Gravity-Gravity"},    ["Dough Fruit"]={remote="StoreFruit",arg="Dough-Dough"},    ["Shadow Fruit"]={remote="StoreFruit",arg="Shadow-Shadow"},    ["Venom Fruit"]={remote="StoreFruit",arg="Venom-Venom"},    ["Eagle Fruit"]={remote="StoreFruit",arg="Eagle-Eagle"},    ["creation Fruit"]={remote="StoreFruit",arg="creation-creation"},    ["Lightning Fruit"]={remote="StoreFruit",arg="Lightning-Lightning"},    ["Portal Fruit"]={remote="StoreFruit",arg="Portal-Portal"},    ["Mammoth Fruit"]={remote="StoreFruit",arg="Mammoth-Mammoth"},    ["T-Rex Fruit"]={remote="StoreFruit",arg="T-Rex-T-Rex"},    ["Gas Fruit"]={remote="StoreFruit",arg="Gas-Gas"},    ["Yeti Fruit"]={remote="StoreFruit",arg="Yeti-Yeti"},    ["Kitsune Fruit"]={remote="StoreFruit",arg="Kitsune-Kitsune"},    ["Blade Fruit"]={remote="StoreFruit",arg="Blade-Blade"},    ["Control Fruit"]={remote="StoreFruit",arg="Control-Control"},    ["Spirit Fruit"]={remote="StoreFruit",arg="Soul-Soul"},    ["Dragon Fruit"]={remote="StoreFruit",arg="Dragon-Dragon"},    ["Leopard Fruit"]={remote="StoreFruit",arg="Leopard-Leopard"},}local lastStoreTime = {}local COOLDOWN_PER_FRUIT = 2local function callRemoteStore(remoteName,arg,fruitInstance)    local remoteObj = ReplicatedStorage:FindFirstChild(remoteName) or (ReplicatedStorage:FindFirstChild("Remotes") and ReplicatedStorage.Remotes:FindFirstChild(remoteName))    if not remoteObj then return false,"RemoteNotFound" end    local ok,res=pcall(function()        if remoteName=="StoreFruit" then            return remoteObj:InvokeServer("StoreFruit",arg,fruitInstance)        else            if arg then                return remoteObj:InvokeServer(arg,fruitInstance)            else                return remoteObj:InvokeServer(fruitInstance)            end        end    end)    return ok,resendlocal function checkAndStoreAll()    local player=LocalPlayer    local backpack = player:FindFirstChild("Backpack")    local char = player.Character    for fruitName,info in pairs(FRUIT_MAP) do        local last = lastStoreTime[fruitName] or 0        if tick()-last>=COOLDOWN_PER_FRUIT then            local instanceInChar = char and char:FindFirstChild(fruitName) or            nil            local instanceInBackpack = backpack and backpack:FindFirstChild(fruitName) or nil            local foundInst = instanceInChar or instanceInBackpack            if foundInst then                local ok,res = pcall(function()                    if ReplicatedStorage:FindFirstChild("Remotes") and ReplicatedStorage.Remotes:FindFirstChild("CommF_") and info.remote=="StoreFruit" then                        return ReplicatedStorage.Remotes.CommF_:InvokeServer("StoreFruit",info.arg,foundInst)                    else                        return callRemoteStore(info.remote,info.arg,foundInst)                    end                end)                lastStoreTime[fruitName] = tick()                if ok then                    Notify("Stored "..fruitName)                else                    Notify("Failed "..fruitName)                end            end        end    endendspawn(function()    while true do        if getgenv().AutoStoreFruit then            pcall(checkAndStoreAll)            task.wait(0.6)        else            task.wait(0.8)        end    endend)--// Auto Fruit Finder + ESP + Teleport + Auto Hop_G.AutoFruit = true_G.AutoHop = truelocal joinedServers = {}joinedServers[game.JobId] = truelocal function rainbowColor(hueShift)    return Color3.fromHSV((tick()*0.3 + hueShift)%1,1,1)endlocal function teleportTo(pos)    if LocalPlayer.Character and LocalPlayer.Character:FindFirstChild("HumanoidRootPart") then        LocalPlayer.Character:MoveTo(pos)    endendlocal function createESP(obj,text)    if obj:FindFirstChild("FruitESP") then return obj.FruitESP.TextLabel end    local billboard = Instance.new("BillboardGui")    billboard.Name = "FruitESP"    billboard.Adornee = obj    billboard.AlwaysOnTop = true    billboard.Size = UDim2.new(0,200,0,50)    billboard.StudsOffset = Vector3.new(0,2,0)    local label = Instance.new("TextLabel")    label.Size = UDim2.new(1,0,1,0)    label.BackgroundTransparency = 1    label.Text = text    label.Font = Enum.Font.SourceSansBold    label.TextScaled = true    label.TextColor3 = Color3.fromRGB(255,255,255)    label.Parent = billboard    billboard.Parent = obj    RunService.RenderStepped:Connect(function()        if label then            label.TextColor3 = rainbowColor(0)        end    end)    return labelendlocal function serverHop()    local cursor = ""    while true do        local url = string.format("https://games.roblox.com/v1/games/%d/servers/Public?sortOrder=Asc&limit=100%s",            game.PlaceId,            cursor~="" and "&cursor="..cursor or "")        local req = HttpService:JSONDecode(game:HttpGet(url))        if req and req.data then            for _,s in pairs(req.data) do                if type(s)=="table" and s.id~=game.JobId and s.playing<s.maxPlayers then                    if not joinedServers[s.id] then                        joinedServers[s.id]=true                        TeleportService:TeleportToPlaceInstance(game.PlaceId,s.id,LocalPlayer)                        return                    end                end            end        end        if not req.nextPageCursor then break end        cursor=req.nextPageCursor    endendtask.spawn(function()    while task.wait(2) do        if _G.AutoFruit then            local foundFruit=false            for _,fruit in pairs(Workspace:GetChildren()) do                if fruit:IsA("Tool") and fruit:FindFirstChild("Handle") then                    foundFruit=true                    createESP(fruit.Handle,fruit.Name)                    teleportTo(fruit.Handle.Position + Vector3.new(0,5,0))                    task.wait(1)                end            end            if not foundFruit and _G.AutoHop then                serverHop()            end        end    endend)--// Auto Join Marines (Updated with Notify)task.spawn(function()    pcall(function()        -- Gọi server để join Marines        local success, err = pcall(function()            game:GetService("ReplicatedStorage").Remotes.CommF_:InvokeServer("SetTeam", "Marines")        end)        if success then            Notify("⚓ Auto Join Marines")        else            Notify("⚓ Join Marines: Thất bại")            warn("Không thể join Marines:", err)        end    end)end)--// Auto Store Fruit (Updated with Notify)spawn(function()    while true do        if getgenv().AutoStoreFruit then            local success, err = pcall(checkAndStoreAll)            if success then                Notify("💾 Fruits Stored")            else                Notify("❌ Store Error")                warn("Store Error:", err)            end            task.wait(0.6)        else            task.wait(0.8)        end    endend)--// Auto Fruit Finder + ESP + Teleport + Auto Hop (Updated with Notify)task.spawn(function()    while task.wait(2) do        if _G.AutoFruit then            local foundFruit = false            for _, fruit in pairs(Workspace:GetChildren()) do                if fruit:IsA("Tool") and fruit:FindFirstChild("Handle") then                    foundFruit = true                    createESP(fruit.Handle, fruit.Name)                    teleportTo(fruit.Handle.Position + Vector3.new(0,5,0))                    Notify("🍎 Found Fruit: "..fruit.Name)                    task.wait(1)                end            end            if not foundFruit and _G.AutoHop then                Notify("🔄 No Fruit Found, Server Hop...")                serverHop()            end        end    endend)