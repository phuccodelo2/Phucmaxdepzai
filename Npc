--// Load Rayfield UI
local Rayfield = loadstring(game:HttpGet("https://sirius.menu/rayfield"))()

local Window = Rayfield:CreateWindow({
    Name = "PHUCMAX Aimbot",
    LoadingTitle = "Aimbot System",
    LoadingSubtitle = "By PHUCMAX",
    Theme = "DarkBlue",
    ToggleUIKeybind = "K",
    ConfigurationSaving = {
        Enabled = true,
        FolderName = "PhucmaxHub",
        FileName = "AimbotCfg"
    }
})

local Tab = Window:CreateTab("Aimbot", "target")

--// Services & locals
local Players = game:GetService("Players")
local RunService = game:GetService("RunService")
local Workspace = game:GetService("Workspace")
local LocalPlayer = Players.LocalPlayer
local Camera = Workspace.CurrentCamera

--// Settings (có UI chỉnh)
local Settings = {
    Enabled = false,
    MaxDistance = 100,
    TeamCheck = false,
    VisibleCheck = true,
    Smoothness = 0.25, -- 0-1 (càng nhỏ càng mượt)
    AimPart = "Head"   -- "Head" hoặc "HumanoidRootPart"
}

--// UI elements
Tab:CreateToggle({
    Name = "Bật/Tắt Aimbot",
    CurrentValue = false,
    Flag = "AimbotEnabled",
    Callback = function(v) Settings.Enabled = v end
})

Tab:CreateSlider({
    Name = "Khoảng cách tối đa (studs)",
    Range = {20, 300},
    Increment = 5,
    CurrentValue = Settings.MaxDistance,
    Flag = "MaxDist",
    Suffix = " studs",
    Callback = function(v) Settings.MaxDistance = v end
})

Tab:CreateToggle({
    Name = "Team Check (bỏ qua đồng đội)",
    CurrentValue = Settings.TeamCheck,
    Flag = "TeamCheck",
    Callback = function(v) Settings.TeamCheck = v end
})

Tab:CreateToggle({
    Name = "Visible Check (không bị tường che)",
    CurrentValue = Settings.VisibleCheck,
    Flag = "VisibleCheck",
    Callback = function(v) Settings.VisibleCheck = v end
})

Tab:CreateSlider({
    Name = "Độ mượt (Smooth)",
    Range = {0, 100},
    Increment = 5,
    CurrentValue = math.floor(Settings.Smoothness*100),
    Suffix = "%",
    Flag = "Smoothness",
    Callback = function(v) Settings.Smoothness = math.clamp(v/100, 0, 1) end
})

Tab:CreateDropdown({
    Name = "Aim vào bộ phận",
    Options = {"Head","HumanoidRootPart"},
    CurrentOption = {"Head"},
    MultipleOptions = false,
    Flag = "AimPart",
    Callback = function(opt) Settings.AimPart = opt[1] end
})

Tab:CreateKeybind({
    Name = "Phím bật/tắt nhanh (PC)",
    CurrentKeybind = "Q",
    HoldToInteract = false,
    Flag = "AimbotKey",
    Callback = function()
        Settings.Enabled = not Settings.Enabled
        Rayfield:Notify({
            Title = "Aimbot",
            Content = Settings.Enabled and "Đã bật" or "Đã tắt",
            Duration = 2
        })
    end
})

--// Helper: lấy nhân vật & part aim an toàn
local function getAimPart(char)
    if not char then return nil end
    local part = char:FindFirstChild(Settings.AimPart) or char:FindFirstChild("Head") or char:FindFirstChild("HumanoidRootPart")
    return part
end

--// Helper: kiểm tra cùng team
local function isSameTeam(plr)
    if not Settings.TeamCheck then return false end
    local lpTeam = LocalPlayer.Team
    return lpTeam ~= nil and plr.Team == lpTeam
end

--// Helper: visible check bằng raycast
local function isVisible(fromPos, targetPart, ignoreList)
    if not Settings.VisibleCheck then return true end
    if not targetPart then return false end
    local params = RaycastParams.new()
    params.FilterType = Enum.RaycastFilterType.Exclude
    params.FilterDescendantsInstances = ignoreList
    local dir = (targetPart.Position - fromPos)
    local result = Workspace:Raycast(fromPos, dir, params)
    if not result then return true end
    -- Nếu tia chạm đúng targetPart hoặc model của target thì coi như thấy được
    return result.Instance:IsDescendantOf(targetPart.Parent)
end

--// Chọn player hợp lệ gần nhất trong phạm vi
local function getClosestValidTarget()
    local lpChar = LocalPlayer.Character
    if not lpChar or not lpChar:FindFirstChild("HumanoidRootPart") then return nil end

    local lpPos = lpChar.HumanoidRootPart.Position
    local closestPlr, closestDist = nil, Settings.MaxDistance

    for _, plr in ipairs(Players:GetPlayers()) do
        if plr ~= LocalPlayer and plr.Character then
            if not isSameTeam(plr) then
                local part = getAimPart(plr.Character)
                local hrp = plr.Character:FindFirstChild("HumanoidRootPart")
                if part and hrp then
                    local dist = (hrp.Position - lpPos).Magnitude
                    if dist <= closestDist then
                        -- visible check
                        if isVisible(Camera.CFrame.Position, part, {LocalPlayer.Character, Camera}) then
                            closestDist = dist
                            closestPlr = plr
                        end
                    end
                end
            end
        end
    end

    return closestPlr
end

--// Smooth look-at
local function smoothLookAt(fromCFrame, targetPos, alpha)
    local newLook = CFrame.new(fromCFrame.Position, targetPos)
    return fromCFrame:Lerp(newLook, alpha)
end

--// Main loop
local currentTarget = nil
RunService.RenderStepped:Connect(function()
    if not Settings.Enabled then
        currentTarget = nil
        return
    end

    -- đảm bảo local char/cam có
    local lpChar = LocalPlayer.Character
    if not lpChar or not Camera then return end

    -- đổi target nếu:
    -- 1) chưa có target
    -- 2) target không còn part/ra khỏi range
    -- 3) bị tường che (nếu bật VisibleCheck)
    local needNew = false
    local targetPart = currentTarget and currentTarget.Character and getAimPart(currentTarget.Character) or nil
    if not currentTarget or not targetPart then
        needNew = true
    else
        local lpHRP = lpChar:FindFirstChild("HumanoidRootPart")
        local trgHRP = currentTarget.Character:FindFirstChild("HumanoidRootPart")
        if not lpHRP or not trgHRP then
            needNew = true
        else
            local dist = (trgHRP.Position - lpHRP.Position).Magnitude
            if dist > Settings.MaxDistance then
                needNew = true
            elseif Settings.VisibleCheck and not isVisible(Camera.CFrame.Position, targetPart, {LocalPlayer.Character, Camera}) then
                needNew = true
            end
        end
    end

    if needNew then
        currentTarget = getClosestValidTarget()
        targetPart = currentTarget and currentTarget.Character and getAimPart(currentTarget.Character) or nil
    end

    -- Aim nếu có target
    if currentTarget and targetPart then
        Camera.CFrame = smoothLookAt(Camera.CFrame, targetPart.Position, math.clamp(Settings.Smoothness, 0, 1))
    end
end)
